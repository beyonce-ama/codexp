[
  {
    "category": "Friend Functions",
    "question": "Fill in the blank to declare a friend function:\n\nclass Box {\n    int width;\n    ____ friend void print(Box b);\n};",
    "choices": ["public:", "private:", "protected:", " "],
    "answer": " ",
    "explanation_correct": "✅ Correct! 'friend' is declared without access specifiers inline.",
    "explanation_wrong": "❌ Incorrect. Just use 'friend void print(Box b);'.",
    "id": 1
  },
  {
    "category": "Virtual Functions",
    "question": "Fill in the blank to declare a virtual method:\n\nclass Animal {\npublic:\n    ____ void speak() { }\n};",
    "choices": ["virtual", "override", "dynamic", "abstract"],
    "answer": "virtual",
    "explanation_correct": "✅ Correct! 'virtual' allows method overriding in derived classes.",
    "explanation_wrong": "❌ Incorrect. Use 'virtual'.",
    "id": 2
  },
  {
    "category": "Override",
    "question": "Fill in the blank to override a virtual function:\n\nclass Dog: public Animal {\npublic:\n    void speak() ____ {\n        std::cout << \"Woof\";\n    }\n};",
    "choices": ["override", "virtual", "extends", "super"],
    "answer": "override",
    "explanation_correct": "✅ Correct! Use 'override' in modern C++ for clarity.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'override'.",
    "id": 3
  },
  {
    "category": "Abstract Classes",
    "question": "Fill in the blank to declare a pure virtual function:\n\nclass Shape {\npublic:\n    virtual void draw() ____ 0;\n};",
    "choices": ["= ", "==", "= =", "==="],
    "answer": "= ",
    "explanation_correct": "✅ Correct! '= 0' defines pure virtual functions.",
    "explanation_wrong": "❌ Incorrect. Syntax is 'virtual void f() = 0;'.",
    "id": 4
  },
  {
    "category": "Templates",
    "question": "Fill in the blank to declare a template function:\n\n____ <typename T>\nT add(T a, T b) { return a + b; }",
    "choices": ["template", "generic", "class", "type"],
    "answer": "template",
    "explanation_correct": "✅ Correct! 'template <typename T>' defines a generic function.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'template'.",
    "id": 5
  },
  {
    "category": "STL Vector",
    "question": "Fill in the blank to declare a vector of integers:\n\nstd::____<int> nums;",
    "choices": ["vector", "list", "set", "map"],
    "answer": "vector",
    "explanation_correct": "✅ Correct! 'std::vector<int>' is the syntax for dynamic arrays.",
    "explanation_wrong": "❌ Incorrect. Use 'vector'.",
    "id": 6
  },
  {
    "category": "STL Vector",
    "question": "Fill in the blank to push 10 into a vector:\n\nnums.____(10);",
    "choices": ["push_back", "append", "add", "insert"],
    "answer": "push_back",
    "explanation_correct": "✅ Correct! 'push_back()' appends elements to a vector.",
    "explanation_wrong": "❌ Incorrect. The method is 'push_back'.",
    "id": 7
  },
  {
    "category": "STL Iterators",
    "question": "Fill in the blank to declare an iterator for a vector:\n\nstd::vector<int>::____ it;",
    "choices": ["iterator", "pointer", "ref", "iter"],
    "answer": "iterator",
    "explanation_correct": "✅ Correct! 'std::vector<int>::iterator' is the syntax.",
    "explanation_wrong": "❌ Incorrect. Use 'iterator'.",
    "id": 8
  },
  {
    "category": "Range-based For",
    "question": "Fill in the blank to loop over elements of a vector:\n\nfor(____ x : nums) {\n    std::cout << x;\n}",
    "choices": ["auto", "int", "var", "each"],
    "answer": "auto",
    "explanation_correct": "✅ Correct! 'auto' deduces the type in range-based for loops.",
    "explanation_wrong": "❌ Incorrect. The best practice is 'auto'.",
    "id": 9
  },
  {
    "category": "Auto Keyword",
    "question": "Fill in the blank to use type inference:\n\n____ x = 42;",
    "choices": ["auto", "var", "let", "int"],
    "answer": "auto",
    "explanation_correct": "✅ Correct! 'auto' lets the compiler deduce the type.",
    "explanation_wrong": "❌ Incorrect. Use 'auto'.",
    "id": 10
  },
  {
    "category": "Constexpr",
    "question": "Fill in the blank to declare a compile-time constant:\n\n____ int value = 10;",
    "choices": ["constexpr", "const", "static", "define"],
    "answer": "constexpr",
    "explanation_correct": "✅ Correct! 'constexpr' means evaluated at compile time.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'constexpr'.",
    "id": 11
  },
  {
    "category": "Lambda",
    "question": "Fill in the blank to define a lambda:\n\nauto square = ____ (int x) { return x * x; };",
    "choices": ["[](int x)", "lambda", "function", "()->int"],
    "answer": "[](int x)",
    "explanation_correct": "✅ Correct! The syntax '[](int x){...}' defines a lambda.",
    "explanation_wrong": "❌ Incorrect. Use '[]'.",
    "id": 12
  },
  {
    "category": "Lambda Capture",
    "question": "Fill in the blank to capture all variables by reference:\n\nauto func = [____]() { std::cout << x; };",
    "choices": ["&", "=", "ref", "*"],
    "answer": "&",
    "explanation_correct": "✅ Correct! '[&]' captures all outer variables by reference.",
    "explanation_wrong": "❌ Incorrect. The syntax is '[&]'.",
    "id": 13
  },
  {
    "category": "Smart Pointers",
    "question": "Fill in the blank to declare a unique_ptr:\n\nstd::____<int> p = std::make_unique<int>(5);",
    "choices": ["unique_ptr", "shared_ptr", "auto_ptr", "ptr"],
    "answer": "unique_ptr",
    "explanation_correct": "✅ Correct! 'std::unique_ptr' is for sole ownership of a resource.",
    "explanation_wrong": "❌ Incorrect. Use 'unique_ptr'.",
    "id": 14
  },
  {
    "category": "Smart Pointers",
    "question": "Fill in the blank to declare a shared_ptr:\n\nstd::____<int> p = std::make_shared<int>(5);",
    "choices": ["shared_ptr", "unique_ptr", "auto_ptr", "ptr"],
    "answer": "shared_ptr",
    "explanation_correct": "✅ Correct! 'std::shared_ptr' allows shared ownership.",
    "explanation_wrong": "❌ Incorrect. Use 'shared_ptr'.",
    "id": 15
  },
  {
    "category": "Move Semantics",
    "question": "Fill in the blank to use std::move:\n\nstd::string s1 = \"hello\";\nstd::string s2 = ____ (s1);",
    "choices": ["std::move", "move", "copy", "transfer"],
    "answer": "std::move",
    "explanation_correct": "✅ Correct! 'std::move' casts an object to an rvalue reference.",
    "explanation_wrong": "❌ Incorrect. Use 'std::move'.",
    "id": 16
  },
  {
    "category": "Rvalue References",
    "question": "Fill in the blank to declare an rvalue reference:\n\nint&& ____ = 5;",
    "choices": ["x", "ref", "rv", "temp"],
    "answer": "x",
    "explanation_correct": "✅ Correct! 'int&& x = 5;' declares an rvalue reference.",
    "explanation_wrong": "❌ Incorrect. Use a variable like 'x'.",
    "id": 17
  },
  {
    "category": "For Each",
    "question": "Fill in the blank to apply a function to each element:\n\nstd::for_each(nums.begin(), nums.end(), ____ );",
    "choices": ["func", "lambda", "square", "print"],
    "answer": "func",
    "explanation_correct": "✅ Correct! Pass a function or lambda as the third argument.",
    "explanation_wrong": "❌ Incorrect. Supply a function object or lambda.",
    "id": 18
  },
  {
    "category": "Type Aliases",
    "question": "Fill in the blank to create a type alias:\n\nusing str = ____;",
    "choices": ["std::string", "string", "char*", "String"],
    "answer": "std::string",
    "explanation_correct": "✅ Correct! 'using str = std::string;' creates an alias.",
    "explanation_wrong": "❌ Incorrect. Use 'std::string'.",
    "id": 19
  },
  {
    "category": "Enums",
    "question": "Fill in the blank to declare an enum class:\n\n____ class Color { Red, Green, Blue };",
    "choices": ["enum", "class", "struct", "constexpr"],
    "answer": "enum",
    "explanation_correct": "✅ Correct! Use 'enum class' for strongly typed enums.",
    "explanation_wrong": "❌ Incorrect. The syntax is 'enum class'.",
    "id": 20
  },
  {
    "category": "Null Pointer",
    "question": "Fill in the blank to represent a null pointer:\n\nint* p = ____;",
    "choices": ["nullptr", "NULL", "0", "nil"],
    "answer": "nullptr",
    "explanation_correct": "✅ Correct! 'nullptr' is the modern null literal in C++11+.",
    "explanation_wrong": "❌ Incorrect. Use 'nullptr'.",
    "id": 21
  },
  {
    "category": "Default Arguments",
    "question": "Fill in the blank to give a default parameter:\n\nint add(int a, int b = ____);",
    "choices": ["10", "0", "1", "null"],
    "answer": "0",
    "explanation_correct": "✅ Correct! Default arguments are set with '=' in declarations.",
    "explanation_wrong": "❌ Incorrect. The default here is '0'.",
    "id": 22
  },
  {
    "category": "Initializer List",
    "question": "Fill in the blank to use uniform initialization:\n\nstd::vector<int> v = {1, 2, ____};",
    "choices": ["3", "4", "5", "6"],
    "answer": "3",
    "explanation_correct": "✅ Correct! C++11 allows list initialization with braces.",
    "explanation_wrong": "❌ Incorrect. Use '3'.",
    "id": 23
  },
  {
    "category": "Static",
    "question": "Fill in the blank to declare a static variable:\n\n____ int counter = 0;",
    "choices": ["static", "const", "constexpr", "global"],
    "answer": "static",
    "explanation_correct": "✅ Correct! 'static' variables keep their value between calls.",
    "explanation_wrong": "❌ Incorrect. Use 'static'.",
    "id": 24
  },
  {
    "category": "Preprocessor",
    "question": "Fill in the blank to define a constant with the preprocessor:\n\n____ MAX 100",
    "choices": ["#define", "const", "constexpr", "macro"],
    "answer": "#define",
    "explanation_correct": "✅ Correct! '#define MAX 100' defines a macro constant.",
    "explanation_wrong": "❌ Incorrect. Use '#define'.",
    "id": 25
  }
]
