[
  {
    "category": "Basics",
    "question": "Fill in the blank to include the iostream library:\n\n____ <iostream>",
    "choices": ["#include", "import", "use", "require"],
    "answer": "#include",
    "explanation_correct": "✅ Correct! '#include' is used to include standard libraries in C++.",
    "explanation_wrong": "❌ Incorrect. The correct directive is '#include'.",
    "id": 1
  },
  {
    "category": "Basics",
    "question": "Fill in the blank to start a C++ program:\n\nint ____() {\n    return 0;\n}",
    "choices": ["main", "start", "program", "execute"],
    "answer": "main",
    "explanation_correct": "✅ Correct! 'main()' is the entry point in C++ programs.",
    "explanation_wrong": "❌ Incorrect. The entry point is 'main'.",
    "id": 2
  },
  {
    "category": "Output",
    "question": "Fill in the blank to print 'Hello':\n\nstd::cout << ____ << std::endl;",
    "choices": ["\"Hello\"", "Hello", "print(\"Hello\")", "'Hello'"],
    "answer": "\"Hello\"",
    "explanation_correct": "✅ Correct! Strings must be in double quotes in C++.",
    "explanation_wrong": "❌ Incorrect. Use '\"Hello\"'.",
    "id": 3
  },
  {
    "category": "Input",
    "question": "Fill in the blank to read a variable x:\n\nint x;\nstd::____ >> x;",
    "choices": ["cin", "input", "read", "scanner"],
    "answer": "cin",
    "explanation_correct": "✅ Correct! 'std::cin' is used for input in C++.",
    "explanation_wrong": "❌ Incorrect. The correct input stream is 'cin'.",
    "id": 4
  },
  {
    "category": "Variables",
    "question": "Fill in the blank to declare an integer variable:\n\n____ age = 25;",
    "choices": ["int", "var", "integer", "num"],
    "answer": "int",
    "explanation_correct": "✅ Correct! Use 'int' for integers in C++.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'int'.",
    "id": 5
  },
  {
    "category": "Conditionals",
    "question": "Fill in the blank to compare if a == b:\n\nif(a ____ b) {\n    std::cout << \"Equal\";\n}",
    "choices": ["==", "=", "===", "equals"],
    "answer": "==",
    "explanation_correct": "✅ Correct! '==' checks equality in C++.",
    "explanation_wrong": "❌ Incorrect. Use '==' not '='.",
    "id": 6
  },
  {
    "category": "Loops",
    "question": "Fill in the blank to write a for loop from 0 to 4:\n\nfor(int i = 0; i < 5; i____) {\n    std::cout << i;\n}",
    "choices": ["++", "--", "+=", "add"],
    "answer": "++",
    "explanation_correct": "✅ Correct! Use 'i++' to increment by 1.",
    "explanation_wrong": "❌ Incorrect. The syntax is 'i++'.",
    "id": 7
  },
  {
    "category": "Loops",
    "question": "Fill in the blank to write a while loop:\n\nint n = 5;\n____(n > 0) {\n    std::cout << n;\n    n--;\n}",
    "choices": ["while", "loop", "repeat", "until"],
    "answer": "while",
    "explanation_correct": "✅ Correct! Use 'while' for a conditional loop.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'while'.",
    "id": 8
  },
  {
    "category": "Switch",
    "question": "Fill in the blank to declare a switch statement:\n\n____(choice) {\n   case 1: std::cout << \"One\";\n}",
    "choices": ["switch", "case", "if", "choose"],
    "answer": "switch",
    "explanation_correct": "✅ Correct! 'switch' is used to handle multiple conditions.",
    "explanation_wrong": "❌ Incorrect. Use 'switch'.",
    "id": 9
  },
  {
    "category": "Functions",
    "question": "Fill in the blank to define a function returning int:\n\n____ add(int a, int b) {\n    return a + b;\n}",
    "choices": ["int", "void", "function", "auto"],
    "answer": "int",
    "explanation_correct": "✅ Correct! The return type 'int' must be declared.",
    "explanation_wrong": "❌ Incorrect. Functions need a return type like 'int'.",
    "id": 10
  },
  {
    "category": "Arrays",
    "question": "Fill in the blank to declare an array of 5 integers:\n\nint numbers[____];",
    "choices": ["5", "int", "n", "array"],
    "answer": "5",
    "explanation_correct": "✅ Correct! 'int numbers[5];' creates an array of 5 integers.",
    "explanation_wrong": "❌ Incorrect. The size must be inside the brackets.",
    "id": 11
  },
  {
    "category": "Strings",
    "question": "Fill in the blank to include the C++ string library:\n\n____ <string>",
    "choices": ["#include", "import", "use", "load"],
    "answer": "#include",
    "explanation_correct": "✅ Correct! '#include <string>' is required for std::string.",
    "explanation_wrong": "❌ Incorrect. Use '#include'.",
    "id": 12
  },
  {
    "category": "Pointers",
    "question": "Fill in the blank to declare a pointer to int:\n\nint* ____;",
    "choices": ["ptr", "pointer", "ref", "var"],
    "answer": "ptr",
    "explanation_correct": "✅ Correct! 'int* ptr;' declares a pointer to int.",
    "explanation_wrong": "❌ Incorrect. Use 'int* ptr;'.",
    "id": 13
  },
  {
    "category": "Pointers",
    "question": "Fill in the blank to assign the address of x to a pointer:\n\nint x = 10;\nint* ptr = ____;",
    "choices": ["&x", "x", "*x", "address(x)"],
    "answer": "&x",
    "explanation_correct": "✅ Correct! Use '&' to get the address of a variable.",
    "explanation_wrong": "❌ Incorrect. Use '&x'.",
    "id": 14
  },
  {
    "category": "References",
    "question": "Fill in the blank to declare a reference to variable x:\n\nint y = 20;\nint& ref = ____;",
    "choices": ["y", "&y", "*y", "ref(y)"],
    "answer": "y",
    "explanation_correct": "✅ Correct! 'int& ref = y;' creates a reference to y.",
    "explanation_wrong": "❌ Incorrect. Assign directly with 'y'.",
    "id": 15
  },
  {
    "category": "Structs",
    "question": "Fill in the blank to declare a struct:\n\n____ Point {\n   int x;\n   int y;\n};",
    "choices": ["struct", "class", "record", "data"],
    "answer": "struct",
    "explanation_correct": "✅ Correct! Use 'struct' to group variables in C++.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'struct'.",
    "id": 16
  },
  {
    "category": "Classes",
    "question": "Fill in the blank to declare a class with private by default:\n\n____ Car {\n   int speed;\n};",
    "choices": ["class", "struct", "object", "record"],
    "answer": "class",
    "explanation_correct": "✅ Correct! 'class' defaults to private members in C++.",
    "explanation_wrong": "❌ Incorrect. Use 'class'.",
    "id": 17
  },
  {
    "category": "Constructors",
    "question": "Fill in the blank to define a constructor for Car:\n\nclass Car {\npublic:\n    ____ Car(int s) { speed = s; }\n};",
    "choices": ["Car", "void", "int", "constructor"],
    "answer": "Car",
    "explanation_correct": "✅ Correct! Constructors use the same name as the class.",
    "explanation_wrong": "❌ Incorrect. The constructor name must match the class name.",
    "id": 18
  },
  {
    "category": "Destructors",
    "question": "Fill in the blank to declare a destructor:\n\nclass Car {\npublic:\n    ____Car() { }\n};",
    "choices": ["~", "!", "del", "destroy"],
    "answer": "~",
    "explanation_correct": "✅ Correct! Destructors begin with '~' followed by the class name.",
    "explanation_wrong": "❌ Incorrect. The correct syntax uses '~'.",
    "id": 19
  },
  {
    "category": "Access Modifiers",
    "question": "Fill in the blank to make a class member accessible everywhere:\n\nclass Car {\n____:\n    int speed;\n};",
    "choices": ["public", "private", "protected", "friend"],
    "answer": "public",
    "explanation_correct": "✅ Correct! 'public:' makes members accessible globally.",
    "explanation_wrong": "❌ Incorrect. Use 'public'.",
    "id": 20
  },
  {
    "category": "Namespaces",
    "question": "Fill in the blank to declare a namespace:\n\n____ myspace {\n   int x;\n}",
    "choices": ["namespace", "package", "module", "scope"],
    "answer": "namespace",
    "explanation_correct": "✅ Correct! 'namespace' groups identifiers in C++.",
    "explanation_wrong": "❌ Incorrect. Use 'namespace'.",
    "id": 21
  },
  {
    "category": "Using Namespace",
    "question": "Fill in the blank to use a namespace:\n\n____ namespace std;",
    "choices": ["using", "import", "include", "from"],
    "answer": "using",
    "explanation_correct": "✅ Correct! 'using namespace std;' allows shorthand usage.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'using'.",
    "id": 22
  },
  {
    "category": "Const",
    "question": "Fill in the blank to declare a constant integer:\n\n____ int MAX = 100;",
    "choices": ["const", "final", "static", "let"],
    "answer": "const",
    "explanation_correct": "✅ Correct! Use 'const' to declare constants in C++.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'const'.",
    "id": 23
  },
  {
    "category": "Inline Functions",
    "question": "Fill in the blank to define an inline function:\n\n____ int square(int x) { return x * x; }",
    "choices": ["inline", "const", "fast", "macro"],
    "answer": "inline",
    "explanation_correct": "✅ Correct! 'inline' suggests function substitution at compile time.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'inline'.",
    "id": 24
  },
  {
    "category": "Operator Overloading",
    "question": "Fill in the blank to overload '+' operator:\n\nclass Vector {\npublic:\n    Vector operator____(const Vector& other);\n};",
    "choices": ["+", "++", "add", "plus"],
    "answer": "+",
    "explanation_correct": "✅ Correct! Use 'operator+' for overloading addition.",
    "explanation_wrong": "❌ Incorrect. The correct syntax is 'operator+'.",
    "id": 25
  }
]