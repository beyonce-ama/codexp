[
  {
    "category": "Basics",
    "question": "Fill in the blank to declare a method entry point for a Java program:\n\npublic static void ____(String[] args) { }",
    "choices": ["main", "start", "run", "execute"],
    "answer": "main",
    "explanation_correct": "✅ Correct! The entry point of every Java application is 'main'.",
    "explanation_wrong": "❌ Incorrect. Use 'main' as the starting method in Java programs.",
    "id": 1
  },
  {
    "category": "Variables",
    "question": "Fill in the blank to declare a constant in Java:\n\n____ double PI = 3.14;",
    "choices": ["const", "final", "static", "constant"],
    "answer": "final",
    "explanation_correct": "✅ Correct! 'final' makes the variable a constant in Java.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'final'.",
    "id": 2
  },
  {
    "category": "Loops",
    "question": "Fill in the blank to loop through numbers 1 to 5:\n\nfor(int i = 1; i <= 5; i____) {\n   System.out.println(i);\n}",
    "choices": ["++", "--", "+=", "-="],
    "answer": "++",
    "explanation_correct": "✅ Correct! 'i++' increments the loop counter by 1.",
    "explanation_wrong": "❌ Incorrect. Use 'i++' for incrementing by 1.",
    "id": 3
  },
  {
    "category": "Conditionals",
    "question": "Fill in the blank to check if x is equal to 10:\n\nif(x ____ 10) {\n   System.out.println(\"Equal\");\n}",
    "choices": ["=", "==", "===", "equals"],
    "answer": "==",
    "explanation_correct": "✅ Correct! '==' compares primitive values in Java.",
    "explanation_wrong": "❌ Incorrect. Use '==' to compare primitives.",
    "id": 4
  },
  {
    "category": "Strings",
    "question": "Fill in the blank to compare two strings:\n\nif(str1.____(str2)) {\n   System.out.println(\"Same\");\n}",
    "choices": ["equals", "==", "compare", "same"],
    "answer": "equals",
    "explanation_correct": "✅ Correct! 'equals()' compares string content in Java.",
    "explanation_wrong": "❌ Incorrect. Use 'equals()' for comparing strings.",
    "id": 5
  },
  {
    "category": "Arrays",
    "question": "Fill in the blank to declare an array of integers:\n\nint[] numbers = new ____(5);",
    "choices": ["array", "int[5]", "int", "Integer"],
    "answer": "int",
    "explanation_correct": "✅ Correct! 'new int(5)' creates an array of length 5.",
    "explanation_wrong": "❌ Incorrect. Use 'int' when creating an array of primitives.",
    "id": 6
  },
  {
    "category": "Classes",
    "question": "Fill in the blank to inherit from a superclass:\n\nclass Dog ____ Animal { }",
    "choices": ["extends", "implements", "inherits", "super"],
    "answer": "extends",
    "explanation_correct": "✅ Correct! 'extends' is used to inherit from a class.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'extends'.",
    "id": 7
  },
  {
    "category": "Interfaces",
    "question": "Fill in the blank to implement an interface:\n\nclass Circle ____ Drawable { }",
    "choices": ["extends", "implements", "inherits", "interface"],
    "answer": "implements",
    "explanation_correct": "✅ Correct! 'implements' is used with interfaces.",
    "explanation_wrong": "❌ Incorrect. Use 'implements' when using an interface.",
    "id": 8
  },
  {
    "category": "Exceptions",
    "question": "Fill in the blank to handle an exception:\n\ntry {\n   int x = 5 / 0;\n} ____ (Exception e) {\n   System.out.println(\"Error\");\n}",
    "choices": ["throw", "catch", "final", "handle"],
    "answer": "catch",
    "explanation_correct": "✅ Correct! 'catch' handles exceptions in Java.",
    "explanation_wrong": "❌ Incorrect. Use 'catch' for handling exceptions.",
    "id": 9
  },
  {
    "category": "Modifiers",
    "question": "Fill in the blank to restrict access to a variable:\n\n____ int age = 30;",
    "choices": ["private", "public", "protected", "final"],
    "answer": "private",
    "explanation_correct": "✅ Correct! 'private' restricts variable access to the same class.",
    "explanation_wrong": "❌ Incorrect. The correct keyword here is 'private'.",
    "id": 10
  },
  {
    "category": "Methods",
    "question": "Fill in the blank to define a method that returns an integer:\n\npublic ____ int add(int a, int b) {\n   return a + b;\n}",
    "choices": ["static", "final", "abstract", "default"],
    "answer": "static",
    "explanation_correct": "✅ Correct! 'static' allows the method to be called without an instance.",
    "explanation_wrong": "❌ Incorrect. The correct keyword here is 'static'.",
    "id": 11
  },
  {
    "category": "Overriding",
    "question": "Fill in the blank to override a method from a superclass:\n\n@Override\npublic ____ String toString() {\n   return \"Custom\";\n}",
    "choices": ["void", "String", "Object", "super"],
    "answer": "String",
    "explanation_correct": "✅ Correct! 'toString()' must return a String when overridden.",
    "explanation_wrong": "❌ Incorrect. The return type must be 'String'.",
    "id": 12
  },
  {
    "category": "Constructors",
    "question": "Fill in the blank to call the constructor of a superclass:\n\npublic Dog() {\n   ____();\n}",
    "choices": ["super", "this", "parent", "base"],
    "answer": "super",
    "explanation_correct": "✅ Correct! 'super()' calls the superclass constructor.",
    "explanation_wrong": "❌ Incorrect. Use 'super()' for superclass constructors.",
    "id": 13
  },
  {
    "category": "Abstract Classes",
    "question": "Fill in the blank to declare an abstract class:\n\n____ class Shape {\n   abstract void draw();\n}",
    "choices": ["abstract", "interface", "virtual", "static"],
    "answer": "abstract",
    "explanation_correct": "✅ Correct! Use 'abstract' to declare a class that cannot be instantiated.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'abstract'.",
    "id": 14
  },
  {
    "category": "Generics",
    "question": "Fill in the blank to declare a generic class:\n\nclass Box<____> {\n   T value;\n}",
    "choices": ["T", "E", "V", "K"],
    "answer": "T",
    "explanation_correct": "✅ Correct! 'T' is a conventional type parameter for generics.",
    "explanation_wrong": "❌ Incorrect. Use 'T' as a generic placeholder.",
    "id": 15
  },
  {
    "category": "Nested Loops",
    "question": "Fill in the blank to print a multiplication table:\n\nfor(int i=1;i<=3;i++) {\n   for(int j=1;j<=3;j++) {\n      System.out.print(i ____ j + \" \");\n   }\n}",
    "choices": ["*", "+", "-", "/"],
    "answer": "*",
    "explanation_correct": "✅ Correct! Multiplication uses '*'.",
    "explanation_wrong": "❌ Incorrect. Use '*' to multiply numbers.",
    "id": 16
  },
  {
    "category": "Collections",
    "question": "Fill in the blank to declare a list of strings:\n\nList<String> names = new ____( );",
    "choices": ["ArrayList<>()", "List<>()", "HashMap<>()", "Set<>()"],
    "answer": "ArrayList<>()",
    "explanation_correct": "✅ Correct! 'ArrayList<>()' creates a dynamic list.",
    "explanation_wrong": "❌ Incorrect. The correct implementation is 'ArrayList'.",
    "id": 17
  },
  {
    "category": "HashMap",
    "question": "Fill in the blank to put a key-value pair in a HashMap:\n\nmap.____(\"name\", \"John\");",
    "choices": ["add", "put", "insert", "append"],
    "answer": "put",
    "explanation_correct": "✅ Correct! Use 'put' to insert into a HashMap.",
    "explanation_wrong": "❌ Incorrect. The correct method is 'put'.",
    "id": 18
  },
  {
    "category": "Exceptions",
    "question": "Fill in the blank to throw an exception:\n\nif(x < 0) {\n   ____ new IllegalArgumentException(\"x must be positive\");\n}",
    "choices": ["throw", "catch", "throws", "error"],
    "answer": "throw",
    "explanation_correct": "✅ Correct! Use 'throw' to signal an exception.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'throw'.",
    "id": 19
  },
  {
    "category": "Inheritance",
    "question": "Fill in the blank to prevent a class from being inherited:\n\n____ class Utility { }",
    "choices": ["final", "private", "abstract", "sealed"],
    "answer": "final",
    "explanation_correct": "✅ Correct! 'final' prevents inheritance in Java.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'final'.",
    "id": 20
  },
  {
    "category": "Lambdas",
    "question": "Fill in the blank to create a lambda that prints each element of a list:\n\nlist.forEach(e -> System.out.____(e));",
    "choices": ["println", "print", "write", "out"],
    "answer": "println",
    "explanation_correct": "✅ Correct! 'println' prints the element followed by a newline.",
    "explanation_wrong": "❌ Incorrect. The correct method is 'println'.",
    "id": 21
  },
  {
    "category": "Streams",
    "question": "Fill in the blank to filter a stream of integers greater than 10:\n\nlist.stream().____(x -> x > 10).forEach(System.out::println);",
    "choices": ["filter", "map", "reduce", "collect"],
    "answer": "filter",
    "explanation_correct": "✅ Correct! 'filter' is used to include elements based on a condition.",
    "explanation_wrong": "❌ Incorrect. Use 'filter' in streams to select elements.",
    "id": 22
  },
  {
    "category": "Streams",
    "question": "Fill in the blank to convert all strings in a stream to uppercase:\n\nlist.stream().____(String::toUpperCase).forEach(System.out::println);",
    "choices": ["map", "filter", "flatMap", "collect"],
    "answer": "map",
    "explanation_correct": "✅ Correct! 'map' transforms each element of the stream.",
    "explanation_wrong": "❌ Incorrect. Use 'map' to transform elements in streams.",
    "id": 23
  },
  {
    "category": "Try-With-Resources",
    "question": "Fill in the blank to auto-close a FileReader:\n\ntry(____ FileReader fr = new FileReader(\"file.txt\")) {\n   // read file\n}",
    "choices": ["FileReader", "new", "AutoCloseable", "BufferedReader"],
    "answer": "FileReader",
    "explanation_correct": "✅ Correct! Declare the resource type inside try().",
    "explanation_wrong": "❌ Incorrect. The correct declaration is 'FileReader'.",
    "id": 24
  },
  {
    "category": "Method References",
    "question": "Fill in the blank to reference a static method:\n\nlist.forEach(MyClass::____);",
    "choices": ["doWork", "method", "main", "print"],
    "answer": "doWork",
    "explanation_correct": "✅ Correct! Method references use 'ClassName::methodName'.",
    "explanation_wrong": "❌ Incorrect. Provide the method name after '::'.",
    "id": 25
  }
]