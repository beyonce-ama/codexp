[
  {
    "category": "Basics",
    "question": "Fill in the blank to print 'Hello World' in Python:\n\n____(\"Hello World\")",
    "choices": ["print", "echo", "say", "write"],
    "answer": "print",
    "explanation_correct": "✅ Correct! 'print()' displays text in Python.",
    "explanation_wrong": "❌ Incorrect. Use 'print()' to output text.",
    "id": 1
  },
  {
    "category": "Variables",
    "question": "Fill in the blank to assign 10 to x:\n\n____ = 10",
    "choices": ["x", "var x", "int x", "let x"],
    "answer": "x",
    "explanation_correct": "✅ Correct! In Python, assignment is just 'x = 10'.",
    "explanation_wrong": "❌ Incorrect. Python does not require type keywords for assignment.",
    "id": 2
  },
  {
    "category": "Data Types",
    "question": "Fill in the blank to create a list:\n\nfruits = ____(\"apple\", \"banana\", \"cherry\")",
    "choices": ["[ ]", "list", "set", "dict"],
    "answer": "list",
    "explanation_correct": "✅ Correct! The 'list()' constructor creates a list.",
    "explanation_wrong": "❌ Incorrect. Use 'list()' or [ ] to make lists.",
    "id": 3
  },
  {
    "category": "Conditionals",
    "question": "Fill in the blank to check if x equals 5:\n\nif x ____ 5:\n    print(\"Yes\")",
    "choices": ["==", "=", "===", "is"],
    "answer": "==",
    "explanation_correct": "✅ Correct! '==' checks equality in Python.",
    "explanation_wrong": "❌ Incorrect. Use '==' not '='.",
    "id": 4
  },
  {
    "category": "Loops",
    "question": "Fill in the blank to loop through numbers 0 to 4:\n\nfor i in ____(5):\n    print(i)",
    "choices": ["range", "list", "loop", "seq"],
    "answer": "range",
    "explanation_correct": "✅ Correct! 'range(5)' generates numbers 0–4.",
    "explanation_wrong": "❌ Incorrect. The function is 'range'.",
    "id": 5
  },
  {
    "category": "Functions",
    "question": "Fill in the blank to define a function:\n\n____ greet():\n    print(\"Hi\")",
    "choices": ["def", "func", "function", "lambda"],
    "answer": "def",
    "explanation_correct": "✅ Correct! Use 'def' to define a function.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'def'.",
    "id": 6
  },
  {
    "category": "Strings",
    "question": "Fill in the blank to get the length of a string:\n\nname = \"Alice\"\nprint(____(name))",
    "choices": ["len", "count", "size", "length"],
    "answer": "len",
    "explanation_correct": "✅ Correct! 'len()' gives the length of a string.",
    "explanation_wrong": "❌ Incorrect. Use 'len()' not 'size'.",
    "id": 7
  },
  {
    "category": "Lists",
    "question": "Fill in the blank to append 'orange' to a list:\n\nfruits = []\nfruits.____('orange')",
    "choices": ["append", "add", "insert", "push"],
    "answer": "append",
    "explanation_correct": "✅ Correct! 'append()' adds an element at the end of a list.",
    "explanation_wrong": "❌ Incorrect. The correct method is 'append()'.",
    "id": 8
  },
  {
    "category": "Dictionaries",
    "question": "Fill in the blank to get a value from a dictionary:\n\nperson = {\"name\": \"John\"}\nprint(person[____])",
    "choices": ["\"name\"", "\"John\"", "0", "key"],
    "answer": "\"name\"",
    "explanation_correct": "✅ Correct! Access dictionary values with their keys.",
    "explanation_wrong": "❌ Incorrect. Use the key string inside [].",
    "id": 9
  },
  {
    "category": "Boolean Logic",
    "question": "Fill in the blank to check multiple conditions:\n\nif a > 0 ____ b > 0:\n    print(\"Both positive\")",
    "choices": ["and", "or", "&&", "||"],
    "answer": "and",
    "explanation_correct": "✅ Correct! 'and' checks if both conditions are true.",
    "explanation_wrong": "❌ Incorrect. Python uses 'and' instead of &&.",
    "id": 10
  },
  {
    "category": "Slicing",
    "question": "Fill in the blank to get the first 3 characters of a string:\n\ntext = \"Python\"\nprint(text[0:____])",
    "choices": ["3", "2", "4", "5"],
    "answer": "3",
    "explanation_correct": "✅ Correct! Index 0:3 gives the first 3 characters.",
    "explanation_wrong": "❌ Incorrect. The correct slice is 0:3.",
    "id": 11
  },
  {
    "category": "List Comprehension",
    "question": "Fill in the blank to create a list of squares from 0 to 4:\n\nsquares = [x**2 for x in ____(5)]",
    "choices": ["range", "list", "seq", "loop"],
    "answer": "range",
    "explanation_correct": "✅ Correct! 'range(5)' generates 0–4 for the comprehension.",
    "explanation_wrong": "❌ Incorrect. The correct function is 'range'.",
    "id": 12
  },
  {
    "category": "Strings",
    "question": "Fill in the blank to convert a string to uppercase:\n\nname = \"alice\"\nprint(name.____())",
    "choices": ["upper", "capitalize", "uppercase", "toUpper"],
    "answer": "upper",
    "explanation_correct": "✅ Correct! 'upper()' converts all letters to uppercase.",
    "explanation_wrong": "❌ Incorrect. Use 'upper()'.",
    "id": 13
  },
  {
    "category": "Strings",
    "question": "Fill in the blank to check if a string starts with 'Py':\n\nlang = \"Python\"\nprint(lang.____(\"Py\"))",
    "choices": ["startswith", "endswith", "contains", "match"],
    "answer": "startswith",
    "explanation_correct": "✅ Correct! 'startswith()' checks string prefixes.",
    "explanation_wrong": "❌ Incorrect. The method is 'startswith'.",
    "id": 14
  },
  {
    "category": "Conditionals",
    "question": "Fill in the blank to check if a variable exists in a list:\n\nif 'apple' ____ fruits:\n    print(\"Yes\")",
    "choices": ["in", "inside", "within", "contains"],
    "answer": "in",
    "explanation_correct": "✅ Correct! Use 'in' to check membership in Python.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'in'.",
    "id": 15
  },
  {
    "category": "Loops",
    "question": "Fill in the blank to create a while loop:\n\ncount = 0\n____ count < 5:\n    print(count)\n    count += 1",
    "choices": ["while", "for", "loop", "until"],
    "answer": "while",
    "explanation_correct": "✅ Correct! 'while' repeats while the condition is true.",
    "explanation_wrong": "❌ Incorrect. Use 'while' not 'for'.",
    "id": 16
  },
  {
    "category": "Loops",
    "question": "Fill in the blank to skip an iteration:\n\nfor i in range(5):\n    if i == 2:\n        ____\n    print(i)",
    "choices": ["continue", "break", "skip", "pass"],
    "answer": "continue",
    "explanation_correct": "✅ Correct! 'continue' skips to the next loop iteration.",
    "explanation_wrong": "❌ Incorrect. Use 'continue'.",
    "id": 17
  },
  {
    "category": "Loops",
    "question": "Fill in the blank to exit a loop early:\n\nfor i in range(5):\n    if i == 3:\n        ____\n    print(i)",
    "choices": ["break", "stop", "exit", "end"],
    "answer": "break",
    "explanation_correct": "✅ Correct! 'break' exits the loop immediately.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'break'.",
    "id": 18
  },
  {
    "category": "Functions",
    "question": "Fill in the blank to give a default parameter value:\n\ndef greet(name='____'):\n    print(\"Hello\", name)",
    "choices": ["World", "Guest", "None", "User"],
    "answer": "World",
    "explanation_correct": "✅ Correct! Default arguments are set in function definitions.",
    "explanation_wrong": "❌ Incorrect. The default given here is 'World'.",
    "id": 19
  },
  {
    "category": "Functions",
    "question": "Fill in the blank to accept any number of arguments:\n\ndef add(____):\n    return sum(nums)",
    "choices": ["*nums", "**nums", "args[]", "var nums"],
    "answer": "*nums",
    "explanation_correct": "✅ Correct! '*args' collects multiple arguments into a tuple.",
    "explanation_wrong": "❌ Incorrect. Use '*nums' for varargs.",
    "id": 20
  },
  {
    "category": "Functions",
    "question": "Fill in the blank to accept keyword arguments:\n\ndef config(____):\n    print(settings)",
    "choices": ["**settings", "*settings", "settings{}", "dict settings"],
    "answer": "**settings",
    "explanation_correct": "✅ Correct! '**kwargs' allows keyword arguments in Python.",
    "explanation_wrong": "❌ Incorrect. Use '**settings'.",
    "id": 21
  },
  {
    "category": "Error Handling",
    "question": "Fill in the blank to handle exceptions:\n\ntry:\n    x = 1 / 0\n____ ZeroDivisionError:\n    print(\"Error!\")",
    "choices": ["except", "catch", "handle", "rescue"],
    "answer": "except",
    "explanation_correct": "✅ Correct! 'except' handles exceptions in Python.",
    "explanation_wrong": "❌ Incorrect. Use 'except' not 'catch'.",
    "id": 22
  },
  {
    "category": "Error Handling",
    "question": "Fill in the blank to always run code after try-except:\n\ntry:\n    f = open(\"file.txt\")\nexcept:\n    print(\"Error\")\n____:\n    f.close()",
    "choices": ["finally", "end", "always", "last"],
    "answer": "finally",
    "explanation_correct": "✅ Correct! 'finally' executes regardless of exceptions.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'finally'.",
    "id": 23
  },
  {
    "category": "With Statement",
    "question": "Fill in the blank to open a file safely:\n\n____ open(\"data.txt\") as f:\n    print(f.read())",
    "choices": ["with", "use", "as", "open"],
    "answer": "with",
    "explanation_correct": "✅ Correct! 'with' ensures the file is closed automatically.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'with'.",
    "id": 24
  },
  {
    "category": "Dictionaries",
    "question": "Fill in the blank to get all dictionary keys:\n\nperson = {\"name\": \"Alice\"}\nprint(person.____())",
    "choices": ["keys", "values", "items", "all"],
    "answer": "keys",
    "explanation_correct": "✅ Correct! 'keys()' returns all dictionary keys.",
    "explanation_wrong": "❌ Incorrect. Use 'keys()'.",
    "id": 25
  }
]