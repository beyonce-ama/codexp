[
  {
    "category": "Dictionaries",
    "question": "Fill in the blank to loop through key-value pairs:\n\nfor k, v in person.____():\n    print(k, v)",
    "choices": ["items", "pairs", "entries", "values"],
    "answer": "items",
    "explanation_correct": "✅ Correct! 'items()' gives key-value pairs.",
    "explanation_wrong": "❌ Incorrect. Use 'items()'.",
    "id": 1
  },
  {
    "category": "Sets",
    "question": "Fill in the blank to create a set literal:\n\ncolors = {\"red\", \"green\", ____}",
    "choices": ["\"blue\"", "\"yellow\"", "\"pink\"", "\"black\""],
    "answer": "\"blue\"",
    "explanation_correct": "✅ Correct! Use curly braces to define a set.",
    "explanation_wrong": "❌ Incorrect. Add '\"blue\"' as the last item.",
    "id": 2
  },
  {
    "category": "Sets",
    "question": "Fill in the blank to check if 'apple' is not in a set:\n\nif 'apple' ____ fruits:\n    print(\"Not present\")",
    "choices": ["not in", "!in", "outside", "exclude"],
    "answer": "not in",
    "explanation_correct": "✅ Correct! 'not in' checks absence in Python.",
    "explanation_wrong": "❌ Incorrect. Use 'not in'.",
    "id": 3
  },
  {
    "category": "Boolean Logic",
    "question": "Fill in the blank to check if either condition is true:\n\nif a > 0 ____ b > 0:\n    print(\"One positive\")",
    "choices": ["or", "and", "||", "either"],
    "answer": "or",
    "explanation_correct": "✅ Correct! 'or' is true if at least one condition is true.",
    "explanation_wrong": "❌ Incorrect. Python uses 'or'.",
    "id": 4
  },
  {
    "category": "Boolean Logic",
    "question": "Fill in the blank to negate a condition:\n\nif ____ is_active:\n    print(\"Not active\")",
    "choices": ["not", "!", "no", "none"],
    "answer": "not",
    "explanation_correct": "✅ Correct! 'not' inverts a Boolean in Python.",
    "explanation_wrong": "❌ Incorrect. The correct keyword is 'not'.",
    "id": 5
  },
  {
    "category": "Classes",
    "question": "Fill in the blank to define a class named Dog:\n\n____ Dog:\n    pass",
    "choices": ["class", "def", "struct", "type"],
    "answer": "class",
    "explanation_correct": "✅ Correct! Use 'class' to define classes in Python.",
    "explanation_wrong": "❌ Incorrect. The keyword is 'class'.",
    "id": 6
  },
  {
    "category": "Classes",
    "question": "Fill in the blank to define an initializer method:\n\nclass Dog:\n    def ____ (self, name):\n        self.name = name",
    "choices": ["__init__", "init", "constructor", "__start__"],
    "answer": "__init__",
    "explanation_correct": "✅ Correct! '__init__' is the constructor in Python.",
    "explanation_wrong": "❌ Incorrect. The correct method is '__init__'.",
    "id": 7
  },
  {
    "category": "Inheritance",
    "question": "Fill in the blank for a class inheriting from Animal:\n\nclass Dog(____):\n    pass",
    "choices": ["Animal", "object", "Base", "Parent"],
    "answer": "Animal",
    "explanation_correct": "✅ Correct! 'class Dog(Animal)' inherits from Animal.",
    "explanation_wrong": "❌ Incorrect. Use the superclass name.",
    "id": 8
  },
  {
    "category": "Super",
    "question": "Fill in the blank to call a superclass initializer:\n\nclass Dog(Animal):\n    def __init__(self, name):\n        ____.__init__(self, name)",
    "choices": ["super", "base", "parent", "self"],
    "answer": "super",
    "explanation_correct": "✅ Correct! 'super()' calls parent methods in Python.",
    "explanation_wrong": "❌ Incorrect. Use 'super'.",
    "id": 9
  },
  {
    "category": "Decorators",
    "question": "Fill in the blank to create a class method:\n\nclass Math:\n    @____\n    def identity(cls):\n        return cls",
    "choices": ["classmethod", "staticmethod", "property", "abstractmethod"],
    "answer": "classmethod",
    "explanation_correct": "✅ Correct! Use '@classmethod' for methods that receive 'cls'.",
    "explanation_wrong": "❌ Incorrect. The correct decorator is '@classmethod'.",
    "id": 10
  },
  {
    "category": "Decorators",
    "question": "Fill in the blank to create a static method:\n\nclass Math:\n    @____\n    def add(a, b):\n        return a + b",
    "choices": ["staticmethod", "classmethod", "abstractmethod", "property"],
    "answer": "staticmethod",
    "explanation_correct": "✅ Correct! Use '@staticmethod' for methods without self or cls.",
    "explanation_wrong": "❌ Incorrect. The correct decorator is '@staticmethod'.",
    "id": 11
  },
  {
    "category": "Properties",
    "question": "Fill in the blank to define a property:\n\nclass Person:\n    @____\n    def name(self):\n        return self._name",
    "choices": ["property", "get", "attr", "prop"],
    "answer": "property",
    "explanation_correct": "✅ Correct! '@property' turns a method into an attribute.",
    "explanation_wrong": "❌ Incorrect. Use '@property'.",
    "id": 12
  },
  {
    "category": "Generators",
    "question": "Fill in the blank to create a generator:\n\ndef countdown(n):\n    while n > 0:\n        ____ n\n        n -= 1",
    "choices": ["yield", "return", "give", "output"],
    "answer": "yield",
    "explanation_correct": "✅ Correct! 'yield' creates generator functions.",
    "explanation_wrong": "❌ Incorrect. Use 'yield'.",
    "id": 13
  },
  {
    "category": "Generator Expressions",
    "question": "Fill in the blank to create a generator expression:\n\nsquares = (x**2 for x in ____ (5))",
    "choices": ["range", "list", "len", "iter"],
    "answer": "range",
    "explanation_correct": "✅ Correct! 'range(5)' feeds values into the generator.",
    "explanation_wrong": "❌ Incorrect. The correct answer is 'range'.",
    "id": 14
  },
  {
    "category": "Comprehensions",
    "question": "Fill in the blank to create a dictionary comprehension:\n\nsquares = {x: x**2 for x in ____ (5)}",
    "choices": ["range", "list", "iter", "dict"],
    "answer": "range",
    "explanation_correct": "✅ Correct! 'range(5)' is often used in dict comprehensions.",
    "explanation_wrong": "❌ Incorrect. Use 'range'.",
    "id": 15
  },
  {
    "category": "Modules",
    "question": "Fill in the blank to import the math module:\n\n____ math",
    "choices": ["import", "from", "using", "include"],
    "answer": "import",
    "explanation_correct": "✅ Correct! 'import math' loads the module.",
    "explanation_wrong": "❌ Incorrect. Use 'import'.",
    "id": 16
  },
  {
    "category": "Modules",
    "question": "Fill in the blank to import only sqrt from math:\n\nfrom math ____ sqrt",
    "choices": ["import", "use", "include", "take"],
    "answer": "import",
    "explanation_correct": "✅ Correct! 'from math import sqrt' imports only sqrt.",
    "explanation_wrong": "❌ Incorrect. Use 'import'.",
    "id": 17
  },
  {
    "category": "Aliasing",
    "question": "Fill in the blank to alias a module:\n\nimport numpy as ____",
    "choices": ["np", "n", "num", "py"],
    "answer": "np",
    "explanation_correct": "✅ Correct! 'np' is the standard alias for numpy.",
    "explanation_wrong": "❌ Incorrect. The common alias is 'np'.",
    "id": 18
  },
  {
    "category": "Typing",
    "question": "Fill in the blank to annotate a function return type:\n\ndef add(a: int, b: int) ____ int:\n    return a + b",
    "choices": ["->", ":", "=>", "as"],
    "answer": "->",
    "explanation_correct": "✅ Correct! Use '->' for return type hints.",
    "explanation_wrong": "❌ Incorrect. The syntax is '-> type'.",
    "id": 19
  },
  {
    "category": "Typing",
    "question": "Fill in the blank to annotate a list of strings:\n\nnames: List[____] = [\"a\", \"b\"]",
    "choices": ["str", "int", "object", "text"],
    "answer": "str",
    "explanation_correct": "✅ Correct! 'List[str]' is a typed list of strings.",
    "explanation_wrong": "❌ Incorrect. The correct type is 'str'.",
    "id": 20
  },
  {
    "category": "Context Managers",
    "question": "Fill in the blank to define a custom context manager:\n\nclass Resource:\n    def __enter__(self):\n        return self\n    def ____(self, exc_type, exc_value, traceback):\n        print(\"Closed\")",
    "choices": ["__exit__", "__close__", "__end__", "__stop__"],
    "answer": "__exit__",
    "explanation_correct": "✅ Correct! '__exit__' is called when leaving a context manager.",
    "explanation_wrong": "❌ Incorrect. The method is '__exit__'.",
    "id": 21
  },
  {
    "category": "F-Strings",
    "question": "Fill in the blank to format a variable into a string:\n\nname = \"Alice\"\nprint(f\"Hello {____}\")",
    "choices": ["name", "\"name\"", "self.name", "$name"],
    "answer": "name",
    "explanation_correct": "✅ Correct! f-strings insert variable values directly.",
    "explanation_wrong": "❌ Incorrect. Use the variable name directly.",
    "id": 22
  },
  {
    "category": "Unpacking",
    "question": "Fill in the blank to unpack a list into variables:\n\nnums = [1, 2, 3]\na, b, ____ = nums",
    "choices": ["c", "nums[2]", "d", "rest"],
    "answer": "c",
    "explanation_correct": "✅ Correct! The third variable must be 'c'.",
    "explanation_wrong": "❌ Incorrect. Assign directly to 'c'.",
    "id": 23
  },
  {
    "category": "Extended Unpacking",
    "question": "Fill in the blank to collect remaining elements:\n\nnums = [1, 2, 3, 4]\na, *b, c = nums\nprint(b)  # prints ____",
    "choices": ["[2, 3]", "[1, 2]", "[3, 4]", "[2]"],
    "answer": "[2, 3]",
    "explanation_correct": "✅ Correct! '*b' collects the middle elements.",
    "explanation_wrong": "❌ Incorrect. The result is [2, 3].",
    "id": 24
  },
  {
    "category": "Walrus Operator",
    "question": "Fill in the blank to assign inside an expression:\n\nif (n := ____ ) > 0:\n    print(n)",
    "choices": ["5", "None", "0", "-1"],
    "answer": "5",
    "explanation_correct": "✅ Correct! 'n := 5' assigns and checks in one step.",
    "explanation_wrong": "❌ Incorrect. The expression uses ':='.",
    "id": 25
  }
]
