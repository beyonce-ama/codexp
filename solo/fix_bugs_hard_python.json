[
  {
    "difficulty": "hard",
    "language": "Python",
    "title": "Binary Search",
    "description": "Implement binary search algorithm.",
    "buggy_code": "def binary_search(arr, target):\n    low, high = 0, len(arr)\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nprint(binary_search([1, 2, 3, 4, 5], 3))",
    "fixed_code": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nprint(binary_search([1, 2, 3, 4, 5], 3))"
  },
  {
    "difficulty": "hard",
    "language": "Python",
    "title": "Memoized Fibonacci",
    "description": "Implement memoization for Fibonacci sequence.",
    "buggy_code": "def fib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        return 1\n    memo[n] = fib(n-1) + fib(n-2)\n    return fib(n-1) + fib(n-2)\n\nprint(fib(50))",
    "fixed_code": "def fib(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        return 1\n    memo[n] = fib(n-1, memo) + fib(n-2, memo)\n    return memo[n]\n\nprint(fib(50))"
  }
]